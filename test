// var person = if(age<18) ?? "too young":"too old"

//sync vs async
// async => call back => promises => async/await

function func1(){
    setTimeout(() => {
        console.log("Function 1");
    },1000);
}
function func2(){
    setTimeout(() => {
        console.log("Function 2");
    },1000);
}
function func3(){
    setTimeout(() => {
        console.log("Function 3");
    },1000);
}

func1();
func2();
func3();

function func1(callback){
    setTimeout(() => {
        console.log("Function 1");
        callback();
    },1000);
}
function func2(callback){
    setTimeout(() => {
        console.log("Function 2");
        callback();
    },1000);
}
function func3(callback){
    setTimeout(() => {
        console.log("Function 3");
        callback();
    },1000);
}
//func1(callback)
//callback hell
func1(() => {
    func2(() => {
        func3(() => {
        })
    })
})

function func1(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 1");
    },1000);
});
}
function func2(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 2");
    },1000);
    });
}
function func3(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 3");
    },1000);
});
}
func1().then(value => {return func2();}).then(value => {func3();})

function func1(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 1");
    },1000);
});
}
function func2(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 2");
    },1000);
    });
}
function func3(){
    return new Promise((resolve,reject) => {
    setTimeout(() => {
        console.log("Function 3");
    },1000);
});
}
async function allfunc(){
    const func1 = func1();
    console.log(func1);

    const func2 = func2();
    console.log(func2);

    const func3 = func3();
    console.log(func3);
}

allfunc();

const mongoose = require('mongoose')
const jwt = require('jsonwebtoken')
const bcrypt = require('bcryptjs')

const UserSchema = mongoose.Schema({
    "username": {type:String, required:true},
    "email": {type:String, required:true},
    "password": {type:String, required:true},
    "RefreshToken": String,
},{timestamps:true})

UserSchema.pre("save",async function (next){
    if(!this.isModified("password")) return next();

    this.password = await bcrypt.hash(this.password);
    next();
})

UserSchema.methods.isPasswordCorrect( async function (password){
    return await bcrypt.compare(password,this.password);
})

UserSchema.methods.generateAccessToken = function () {
    return jwt.sign({
        _id: this.id,
        "username": this.username,
        "password": this.password,
    },
        process.env.access_token_secret,{
            expiresIn: process.env.accesstokenexpiry,
        })
}

UserSchema.methods.generateRefreshToken = function () {
    return jwt.sign({
        _id: this.id,
    },
        process.env.refresh_token_secret,{
            expiresIn: process.env.refreshtokenexpiry,
        })
}

module.exports = mongoose.model("user",UserSchema);